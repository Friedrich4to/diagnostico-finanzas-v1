---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Cuestionario Financiero">
  <div id="quiz-container">
    <!-- Aqu칤 se mantiene la estructura fija -->
    <div id="pregunta-section">
      <h2 class="question-title" id="pregunta-texto"></h2>
      <ul class="list" id="opciones-lista"></ul>
    </div>

    <!-- Secci칩n de resultados -->
    <div id="resultado-section">
		<h2>Resultados</h2>
		<div class="resultados-box">
			<!-- Puntaje -->
			<div>
				<p id="puntaje-total"></p>
				<div id="consejos"></div>
			</div>
			<!-- 츼reas a mejorar -->
			<div>
				<h3 class="tips-title">츼reas a mejorar:</h3>
				<ul id="areas-mejora"></ul>
			</div>
		</div>
    </div>
  </div>

  <script type="module">
    import { preguntas } from "/data/preguntas.js";

    let currentQuestion = 0;
    let respuestas = [];

    const preguntaTexto = document.getElementById('pregunta-texto');
    const opcionesLista = document.getElementById('opciones-lista');
    const resultadoSection = document.getElementById('resultado-section');
    const puntajeTotal = document.getElementById('puntaje-total');
    const consejosDiv = document.getElementById('consejos');
    const preguntaSection = document.getElementById('pregunta-section');
	const areasMejora = document.getElementById('areas-mejora');

    function mostrarPregunta() {
      const pregunta = preguntas[currentQuestion];
      preguntaTexto.textContent = pregunta.texto;
      opcionesLista.innerHTML = ""; // limpiar opciones previas

      pregunta.opciones.forEach((op, index) => {
        const li = document.createElement("li");
        const btn = document.createElement("button");
        btn.textContent = op.texto;
        btn.addEventListener("click", () => seleccionarOpcion(index));
        li.appendChild(btn);
        opcionesLista.appendChild(li);
      });
    }

    function seleccionarOpcion(opcionIndex) {
		const opcion = preguntas[currentQuestion].opciones[opcionIndex];
		respuestas.push({
			pregunta: preguntas[currentQuestion].texto,
			puntos: opcion.puntos,
			respuesta: opcion.texto   // 游녣 Guardamos tambi칠n la respuesta elegida
		});

		// Remover focus para evitar efecto hover pegado
		document.activeElement.blur();

		currentQuestion++;
		if (currentQuestion < preguntas.length) {
			mostrarPregunta();
		} else {
			mostrarResultados();
		}
	}

	function mostrarResultados() {
		const totalPuntos = respuestas.reduce((sum, r) => sum + r.puntos, 0);

		const minPuntos = Math.min(...respuestas.map(r => r.puntos));
    	const debilidades = respuestas.filter(r => r.puntos < 5);

		let consejos = "";

		if (totalPuntos <= 10) {
			consejos += "<p>Situaci칩n cr칤tica, urgente tomar medidas.</p>";
		} else if (totalPuntos <= 15) {
			consejos += "<p>Situaci칩n fr치gil, debes fortalecer h치bitos.</p>";
		} else if (totalPuntos <= 20) {
			consejos += "<p>Situaci칩n estable, con 치reas por mejorar.</p>";
		} else {
			consejos += "<p>Salud financiera s칩lida, sigue creciendo.</p>";
		}

		// Mostrar consejos generales
		consejosDiv.innerHTML = consejos;

		// Rellenar 치reas a mejorar en su <ul> fijo del HTML
		areasMejora.innerHTML = ""; // limpiar
		debilidades.forEach(d => {
		const li = document.createElement("li");
			const preguntaDiv = document.createElement("div");
			preguntaDiv.classList.add("pregunta-texto");
			preguntaDiv.textContent = d.pregunta;

			const respuestaDiv = document.createElement("div");
			respuestaDiv.classList.add("respuesta-texto");
			respuestaDiv.textContent = `"${d.respuesta}"`;

			const puntajeDiv = document.createElement("div");
			puntajeDiv.classList.add("puntaje-texto");
			puntajeDiv.textContent = `(puntaje: ${d.puntos})`;

			li.appendChild(preguntaDiv);
			li.appendChild(respuestaDiv);
			li.appendChild(puntajeDiv);
		areasMejora.appendChild(li);
		});

		// Ocultar preguntas y mostrar resultados
		preguntaSection.style.display = "none";
		resultadoSection.style.display = "block";

		puntajeTotal.textContent = `Puntaje total: ${totalPuntos}`;
		}

    mostrarPregunta();
  </script>
</Layout>
